package moe.brianhsu.live2d.enitiy.math

import org.scalatest.GivenWhenThen
import org.scalatest.featurespec.AnyFeatureSpec
import org.scalatest.matchers.should.Matchers
import org.scalatest.prop.TableDrivenPropertyChecks

class CardanoAlgorithmFeature extends AnyFeatureSpec with GivenWhenThen with Matchers with TableDrivenPropertyChecks {

  Feature("Calculate the value for Bezier") {
    Scenario("Only a is less than Epsilon (0.00001f)") {
      val dataTable = Table(
        ("a", "b", "c", "d", "expectedValue"),
        (0.0000071581f, 1.8592283726f, 0.6517477036f, 1.9367662668f, Float.NaN),
        (0.0000093028f, 1.6617236137f, 1.5260283947f, 0.9151295424f, Float.NaN),
        (0.0000049565f, 0.8380661011f, 0.3679608107f, 1.7203949690f, Float.NaN),
        (0.0000015681f, 0.2157789469f, 1.1666580439f, 0.3160203695f, 0.0000000000f),
        (0.0000018608f, 0.9930502176f, 1.6570111513f, 1.5485532284f, Float.NaN),
        (0.0000020368f, 1.5089935064f, 1.2941900492f, 1.4185116291f, Float.NaN),
        (0.0000044082f, 1.5119091272f, 0.4268656969f, 0.9614545107f, Float.NaN),
        (0.0000064204f, 0.5202944279f, 0.1351147890f, 1.7427152395f, Float.NaN),
        (0.0000050088f, 0.5341696739f, 0.2235735655f, 0.3816637993f, Float.NaN),
        (0.0000030912f, 1.3780686855f, 1.6673617363f, 0.8972568512f, Float.NaN),
        (0.0000076516f, 1.7109228373f, 0.6339256763f, 0.7657903433f, Float.NaN),
        (0.0000003948f, 1.9974490404f, 0.5658372641f, 0.8202159405f, Float.NaN),
        (0.0000090676f, 1.1821568012f, 1.0065517426f, 0.0703686476f, 0.0000000000f),
        (0.0000021436f, 0.5286290646f, 1.4632562399f, 0.4135056734f, 0.0000000000f),
        (0.0000011904f, 1.0774288177f, 0.9895625114f, 0.4194403887f, Float.NaN),
        (0.0000035781f, 1.8362386227f, 1.9784777164f, 0.9552799463f, Float.NaN),
        (0.0000056029f, 0.4522933960f, 0.3066744804f, 1.5586135387f, Float.NaN),
        (0.0000000956f, 1.4427043200f, 0.1696320772f, 1.0284607410f, Float.NaN),
        (0.0000083299f, 0.6920390129f, 0.1800791025f, 1.6901431084f, Float.NaN),
        (0.0000088640f, 1.8939052820f, 0.3369050026f, 0.8695045710f, Float.NaN),
        (0.0000038095f, 1.8459318876f, 1.8571506739f, 0.1058428288f, 0.0000000000f),
        (0.0000090776f, 0.3433295488f, 0.4299222231f, 0.0200325251f, 0.0000000000f),
        (0.0000001727f, 1.0993005037f, 1.8094124794f, 1.1694022417f, Float.NaN),
        (0.0000000545f, 0.3013248444f, 1.7072576284f, 0.9549733400f, 0.0000000000f),
        (0.0000040599f, 0.6474407911f, 0.3460096121f, 0.1469486952f, Float.NaN),
        (0.0000076398f, 0.9589284658f, 0.7506637573f, 0.9643765688f, Float.NaN),
        (0.0000021212f, 1.6044573784f, 0.6202656031f, 0.1444611549f, Float.NaN),
        (0.0000084468f, 0.2711517811f, 1.4542040825f, 0.9820748568f, 0.0000000000f),
        (0.0000080751f, 1.2617999315f, 0.3067275286f, 1.9829081297f, Float.NaN),
        (0.0000083555f, 1.0724865198f, 0.1885421276f, 1.2828849554f, Float.NaN),
      )

      forAll(dataTable) { (a, b, c, d, expectedResult) =>
        When(s"the passed in value is ($a, $b, $c, $d)")
        val value = CardanoAlgorithm.forBezier(a, b, c, d)

        Then(s"it should calculated correct value, which is $expectedResult")
        if (expectedResult.isNaN) {
          value.isNaN shouldBe true
        } else {
          value shouldBe expectedResult
        }
      }
    }


    Scenario("Both a and b are less than Epsilon (0.00001f)") {
      val dataTable = Table(
        ("a", "b", "c", "d", "expectedValue"),
        (0.0000027194f, 0.0000044418f, -1.8178164959f, 1.4135737419f, 0.7776218f),
        (0.0000032264f, 0.0000095089f, 1.4660935402f, -1.9617463350f, 1.0000000000f),
        (0.0000020255f, 0.0000021622f, -1.4112367630f, 0.0098879337f, 0.007006573f),
        (0.0000090216f, 0.0000072131f, 1.9477901459f, 0.5976318121f, 0.0000000000f),
      )

      forAll(dataTable) { (a, b, c, d, expectedResult) =>
        When(s"the passed in value is ($a, $b, $c, $d)")
        val value = CardanoAlgorithm.forBezier(a, b, c, d)

        Then(s"it should calculated correct value, which is $expectedResult")
        value shouldBe expectedResult
      }
    }

    Scenario("Both a and b and c are less than Epsilon (0.00001f)") {
      val dataTable = Table(
        ("a", "b", "c", "d", "expectedValue"),
        (0.0000008899f, 0.0000082609f, 0.0000079845f, -0.8488219976f, 0.848822f),
        (0.0000071054f, 0.0000080073f, -0.0000056345f, 1.3763494492f, 0.0000000000f),
        (0.0000052400f, 0.0000017042f, -0.0000000707f, -1.1355297565f, 1.0000000000f),
        (0.0000072912f, 0.0000093139f, 0.0000052066f, 1.2699966431f, 0.0000000000f),
      )

      forAll(dataTable) { (a, b, c, d, expectedResult) =>
        When(s"the passed in value is ($a, $b, $c, $d)")
        val value = CardanoAlgorithm.forBezier(a, b, c, d)

        Then(s"it should calculated correct value, which is $expectedResult")
        value shouldBe expectedResult
      }
    }

    Scenario("Both a and b are greater or equal than Epsilon (0.00001f)") {
      val dataTable = Table(
        ("a", "b", "c", "d", "expectedValue"),
        (-0.4898846149f, 1.8261890411f, 1.1776885986f, 3.5153646469f, 1.0000000000f),
        (0.4596699476f, 0.7398647666f, 0.2378516793f, 0.0013307333f, 0.0f),
        (-0.3197870255f, 2.8785676956f, -2.8414497375f, 0.5773391724f, 0.28030038f),
        (0.0009493828f, 2.8019509315f, 2.7238583565f, 0.8391044140f, 0.0f),
        (-1.5732357502f, 2.9005069733f, 2.8219094276f, 1.2955732346f, 1.0000000000f),
        (1.0967125893f, -1.5824607611f, -2.7710285187f, 1.0193777084f, 0.3218973279f),
        (0.2141196132f, 0.8244561553f, 0.5864561796f, 0.5864561796f, 0.0f),
        (0.0562305450f, 2.5787291527f, -1.1393556595f, 4.4202432632f, 0.0000000000f),
        (-1.7362000942f, -1.4628850222f, -2.5562162399f, -0.1553034782f, 0.0000000000f),
        (-1.5486898422f, 0.6951789856f, -3.7839679718f, 2.4828076363f, 0.6273829937f),
        (-1.6104314327f, 1.0182185173f, -0.8097848892f, -1.3203871250f, 0.0000000000f),
        (1.4341700077f, 0.3590776920f, 0.5131764412f, -4.2193989754f, 1.0000000000f),
        (-0.2058384418f, -2.7038798332f, -3.9518089294f, -1.5953083038f, 0.0000000000f),
        (-1.4115662575f, -1.9007885456f, -0.6966013908f, 1.7330179214f, 0.6677603722f),
        (0.8492169380f, 1.5234012604f, 3.1760206223f, -3.7328000069f, 0.7694798112f),
        (-0.0633015633f, 2.8959474564f, 0.7225232124f, 0.6190242767f, 1.0000000000f),
        (1.8944067955f, 0.9620442390f, -0.0376152992f, -4.0271015167f, 1.0000000000f),
        (1.4649007320f, 1.0845756531f, -2.1331458092f, -0.2019066811f, 0.9483518600f),
        (1.9752531052f, 1.3936777115f, -1.9119687080f, -3.2795901299f, 1.0000000000f),
        (-0.9199168682f, 0.4368028641f, 3.1868891716f, 0.8899917603f, 0.0000000000f),
        (-1.7827134132f, -2.2829051018f, 1.2855062485f, -0.9431095123f, 0.0000000000f),
        (-1.7986116409f, 1.4987087250f, -0.0121169090f, 4.3985700607f, 1.0000000000f),
        (-1.9226109982f, -2.4825892448f, 0.4993109703f, 3.0997323990f, 0.9155949354f),
        (-1.5776064396f, 2.2224516869f, 0.1654353142f, 4.0869998932f, 1.0000000000f),
        (0.00014400482177734375f, -2.82044506072998050000f, 2.29604101181030270000f, -2.10443472862243650000f, 0.40722656f),
        (-8.25655555725097700000f, -5.59376811981201200000f, 7.03807830810546900000f, 4.98343944549560550000f, 0.93199563f)
      )

      forAll(dataTable) { (a, b, c, d, expectedResult) =>
        When(s"the passed in value is ($a, $b, $c, $d)")
        val value = CardanoAlgorithm.forBezier(a, b, c, d)

        Then(s"it should calculated correct value, which is $expectedResult")
        value shouldBe expectedResult
      }
    }
  }

}
